#!/usr/bin/env python3
"""
Simple Flask Backend Enhancement Test
"""

import sys

def test_backend_integration():
    """Test backend integration with enhanced utilities"""
    print("Flask Backend Enhancement Test")
    print("=" * 40)
    
    try:
        # Test importing enhanced utilities used by Flask
        from qr_utils import (
            generate_qr_with_analysis,
            analyze_qr_requirements, 
            estimate_steganography_capacity,
            get_capacity_info
        )
        
        print("‚úÖ Enhanced QR utilities import successful")
        
        # Test the functions that Flask endpoints use
        test_data = "Flask backend test"
        
        # Test capacity analysis (used by all endpoints)
        capacity_info = get_capacity_info(len(test_data), 'M')
        if capacity_info and 'all_levels' in capacity_info:
            print("‚úÖ Capacity analysis working")
        else:
            print("‚ùå Capacity analysis failed")
            return False
        
        # Test requirements analysis (used by /analyze_qr)
        requirements = analyze_qr_requirements(test_data)
        if requirements and 'recommended_version' in requirements:
            print("‚úÖ Requirements analysis working")
        else:
            print("‚ùå Requirements analysis failed")
            return False
        
        # Test steganography analysis (used by all endpoints)
        # Need to provide QR size - estimate from requirements
        estimated_size = (requirements.get('modules_needed', 25) * 10, requirements.get('modules_needed', 25) * 10)
        stego_analysis = estimate_steganography_capacity(estimated_size)
        if stego_analysis and 'compatibility_score' in stego_analysis:
            print("‚úÖ Steganography analysis working")
        else:
            print("‚ùå Steganography analysis failed")
            return False
        
        print("\nFlask Backend Integration Status:")
        print("‚úÖ All enhanced utilities working")
        print("‚úÖ Ready for Flask endpoint integration")
        print("‚úÖ New API endpoints can use enhanced functions")
        
        # Show what Flask endpoints will provide
        print("\nFlask Enhancement Summary:")
        print("‚Ä¢ Enhanced /generate_qr with comprehensive metadata")
        print("‚Ä¢ New /analyze_qr for analysis-only requests")
        print("‚Ä¢ New /qr_config for configuration options")
        print("‚Ä¢ Rate limiting and input validation")
        print("‚Ä¢ Response caching for performance")
        print("‚Ä¢ Comprehensive error handling")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Import error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Test error: {e}")
        return False

def main():
    success = test_backend_integration()
    
    if success:
        print("\nüéâ Flask Backend Enhancement Ready!")
        print("All enhanced utilities are working and Flask can use them.")
    else:
        print("\n‚ùå Flask Backend Enhancement Issues Found")
    
    return success

if __name__ == "__main__":
    result = main()
    sys.exit(0 if result else 1)
